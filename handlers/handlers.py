# handlers.py

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    CallbackContext,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    Filters,
    CallbackQueryHandler,
)
from utils.models import Movie
from database.database import (
    add_search_history,
    get_search_history,
    clear_search_history,
)
import telegram
from datetime import datetime
import locale
from html import escape  # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
try:
    locale.setlocale(locale.LC_TIME, "ru_RU.UTF-8")
except locale.Error:
    locale.setlocale(locale.LC_TIME, "")  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
MOVIE_NAME, MOVIE_COUNT = range(2)
MOVIE_RATING, MOVIE_GENRE, MOVIE_RATING_COUNT = range(2, 5)
BUDGET_TYPE, BUDGET_GENRE, BUDGET_COUNT = range(5, 8)


class CommandHandlers:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    def __init__(self, api_client, dispatcher):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥.

        :param api_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞.
        :param dispatcher: –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
        """
        self.api_client = api_client
        self.dispatcher = dispatcher

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.start_handler = CommandHandler("start", self.start)
        self.help_handler = CommandHandler("help", self.help_command)
        self.history_handler = CommandHandler("history", self.history)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.help_button_handler = MessageHandler(
            Filters.regex("^–ü–æ–º–æ—â—å$"), self.help_command
        )
        self.back_to_main_handler = MessageHandler(
            Filters.regex("^–ù–∞ –≥–ª–∞–≤–Ω—É—é$"), self.start
        )
        self.history_button_handler = MessageHandler(
            Filters.regex("^–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞$"), self.history
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        self.movie_search_handler = ConversationHandler(
            entry_points=[
                CommandHandler("movie_search", self.movie_search),
                MessageHandler(Filters.regex("^–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é$"), self.movie_search),
            ],
            states={
                MOVIE_NAME: [
                    MessageHandler(Filters.regex("^–û—Ç–º–µ–Ω–∞$"), self.cancel),
                    MessageHandler(
                        Filters.text & ~Filters.command, self.get_movie_name
                    ),
                ],
                MOVIE_COUNT: [
                    MessageHandler(Filters.regex("^–û—Ç–º–µ–Ω–∞$"), self.cancel),
                    MessageHandler(
                        Filters.text & ~Filters.command, self.get_movie_count
                    ),
                ],
            },
            fallbacks=[
                CommandHandler("cancel", self.cancel),
                MessageHandler(Filters.regex("^–û—Ç–º–µ–Ω–∞$"), self.cancel),
            ],
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É —Å —É—á—ë—Ç–æ–º –∂–∞–Ω—Ä–∞
        self.movie_by_rating_handler = ConversationHandler(
            entry_points=[
                CommandHandler("movie_by_rating", self.movie_by_rating),
                MessageHandler(
                    Filters.regex("^–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É$"), self.movie_by_rating
                ),
            ],
            states={
                MOVIE_RATING: [
                    MessageHandler(Filters.regex("^–û—Ç–º–µ–Ω–∞$"), self.cancel),
                    MessageHandler(Filters.text & ~Filters.command, self.get_rating),
                ],
                MOVIE_GENRE: [
                    MessageHandler(Filters.regex("^–û—Ç–º–µ–Ω–∞$"), self.cancel),
                    MessageHandler(Filters.text & ~Filters.command, self.get_genre),
                ],
                MOVIE_RATING_COUNT: [
                    MessageHandler(Filters.regex("^–û—Ç–º–µ–Ω–∞$"), self.cancel),
                    MessageHandler(
                        Filters.text & ~Filters.command, self.get_rating_count
                    ),
                ],
            },
            fallbacks=[
                CommandHandler("cancel", self.cancel),
                MessageHandler(Filters.regex("^–û—Ç–º–µ–Ω–∞$"), self.cancel),
            ],
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –±—é–¥–∂–µ—Ç—É —Å —É—á—ë—Ç–æ–º –∂–∞–Ω—Ä–∞
        self.movie_by_budget_handler = ConversationHandler(
            entry_points=[
                CommandHandler("movie_by_budget", self.movie_by_budget),
                MessageHandler(
                    Filters.regex("^–ü–æ–∏—Å–∫ –ø–æ –±—é–¥–∂–µ—Ç—É$"), self.movie_by_budget
                ),
            ],
            states={
                BUDGET_TYPE: [
                    MessageHandler(Filters.regex("^–û—Ç–º–µ–Ω–∞$"), self.cancel),
                    MessageHandler(
                        Filters.regex("^(–ú–∞–ª–æ–±—é–¥–∂–µ—Ç–Ω—ã–µ|–í—ã—Å–æ–∫–æ–±—é–¥–∂–µ—Ç–Ω—ã–µ)$"),
                        self.get_budget_type,
                    ),
                ],
                BUDGET_GENRE: [
                    MessageHandler(Filters.regex("^–û—Ç–º–µ–Ω–∞$"), self.cancel),
                    MessageHandler(
                        Filters.text & ~Filters.command, self.get_budget_genre
                    ),
                ],
                BUDGET_COUNT: [
                    MessageHandler(Filters.regex("^–û—Ç–º–µ–Ω–∞$"), self.cancel),
                    MessageHandler(
                        Filters.text & ~Filters.command, self.get_budget_count
                    ),
                ],
            },
            fallbacks=[
                CommandHandler("cancel", self.cancel),
                MessageHandler(Filters.regex("^–û—Ç–º–µ–Ω–∞$"), self.cancel),
            ],
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.search_by_name_button_handler = MessageHandler(
            Filters.regex("^–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é$"), self.movie_search
        )
        self.search_by_rating_button_handler = MessageHandler(
            Filters.regex("^–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É$"), self.movie_by_rating
        )
        self.search_by_budget_button_handler = MessageHandler(
            Filters.regex("^–ü–æ–∏—Å–∫ –ø–æ –±—é–¥–∂–µ—Ç—É$"), self.movie_by_budget
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        self.clear_history_handler = CallbackQueryHandler(
            self.handle_clear_history,
            pattern="^(confirm_clear_history|cancel_clear_history)$",
        )

    def register_handlers(self):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.
        """
        dp = self.dispatcher

        dp.add_handler(self.start_handler)
        dp.add_handler(self.help_handler)

        dp.add_handler(self.movie_search_handler)
        dp.add_handler(self.movie_by_rating_handler)
        dp.add_handler(self.movie_by_budget_handler)

        dp.add_handler(self.history_handler)

        dp.add_handler(self.help_button_handler)
        dp.add_handler(self.search_by_name_button_handler)
        dp.add_handler(self.search_by_rating_button_handler)
        dp.add_handler(self.search_by_budget_button_handler)
        dp.add_handler(self.back_to_main_handler)
        dp.add_handler(self.history_button_handler)

        dp.add_handler(self.clear_history_handler)

    def start(self, update: Update, context: CallbackContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        """
        keyboard = [
            [
                KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"),
                KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"),
                KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –±—é–¥–∂–µ—Ç—É"),
            ],
            [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞"), KeyboardButton("–ü–æ–º–æ—â—å")],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
        )

    def cancel(self, update: Update, context: CallbackContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –û—Ç–º–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        """
        keyboard = [
            [
                KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"),
                KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"),
                KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –±—é–¥–∂–µ—Ç—É"),
            ],
            [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞"), KeyboardButton("–ü–æ–º–æ—â—å")],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=reply_markup)
        return ConversationHandler.END

    def help_command(self, update: Update, context: CallbackContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
        """
        keyboard = [
            [
                KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"),
                KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"),
                KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –±—é–¥–∂–µ—Ç—É"),
            ],
            [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞"), KeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é")],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        help_text = (
            "üìú <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
            "/movie_search - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "/movie_by_rating - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –∂–∞–Ω—Ä—É\n"
            "/movie_by_budget - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –±—é–¥–∂–µ—Ç—É –∏ –∂–∞–Ω—Ä—É\n"
            "/history - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞\n"
        )
        update.message.reply_text(
            help_text, parse_mode="HTML", reply_markup=reply_markup
        )

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ---

    def movie_search(self, update: Update, context: CallbackContext):
        """
        –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
        """
        keyboard = [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]]
        reply_markup = ReplyKeyboardMarkup(
            keyboard, resize_keyboard=True, one_time_keyboard=True
        )
        update.message.reply_text(
            "üé¨ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞:</b>",
            reply_markup=reply_markup,
            parse_mode="HTML",
        )
        return MOVIE_NAME

    def get_movie_name(self, update: Update, context: CallbackContext):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        """
        name = update.message.text.strip()
        context.user_data["name"] = escape(name)
        update.message.reply_text(
            "üî¢ <b>–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–≤–µ—Å—Ç–∏?</b> (1-250)", parse_mode="HTML"
        )
        return MOVIE_COUNT

    def get_movie_count(self, update: Update, context: CallbackContext):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ API –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
        """
        count_text = update.message.text.strip()
        try:
            count = int(count_text)
            if count < 1 or count > 250:
                update.message.reply_text(
                    "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 250.</b>",
                    parse_mode="HTML",
                )
                return MOVIE_COUNT

            context.user_data["count"] = count

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ API
            movies_data = self.api_client.search_movies_by_name(
                query=context.user_data["name"], limit=context.user_data["count"]
            )

            if not movies_data:
                update.message.reply_text(
                    "üîç <b>–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.</b>",
                    parse_mode="HTML",
                )
                return ConversationHandler.END

            movies = [Movie.from_api_data(movie) for movie in movies_data]

            # –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
            add_search_history(
                user_id=update.effective_user.id,
                search_type="name",
                search_params={"name": context.user_data["name"], "count": count},
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for movie in movies:
                self.send_movie_info(update, context, movie)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.send_main_menu(update, context)

            return ConversationHandler.END

        except ValueError:
            update.message.reply_text(
                "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>", parse_mode="HTML"
            )
            return MOVIE_COUNT

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –∂–∞–Ω—Ä—É ---

    def movie_by_rating(self, update: Update, context: CallbackContext):
        """
        –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É.
        """
        keyboard = [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]]
        reply_markup = ReplyKeyboardMarkup(
            keyboard, resize_keyboard=True, one_time_keyboard=True
        )
        update.message.reply_text(
            "‚≠ê <b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7 –∏–ª–∏ 7-9.5):</b>",
            reply_markup=reply_markup,
            parse_mode="HTML",
        )
        return MOVIE_RATING

    def get_rating(self, update: Update, context: CallbackContext):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –∑–∞–ø—Ä–æ—Å –∂–∞–Ω—Ä–∞.
        """
        rating_text = update.message.text.strip()
        try:
            if "-" in rating_text:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –¥–∏–∞–ø–∞–∑–æ–Ω
                min_rating_str, max_rating_str = rating_text.replace(" ", "").split("-")
                min_rating = float(min_rating_str)
                max_rating = float(max_rating_str)
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –æ–¥–Ω–æ —á–∏—Å–ª–æ
                min_rating = float(rating_text)
                max_rating = 10.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if not (1 <= min_rating <= 10) or not (1 <= max_rating <= 10):
                update.message.reply_text(
                    "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 10.</b>",
                    parse_mode="HTML",
                )
                return MOVIE_RATING
            if min_rating > max_rating:
                update.message.reply_text(
                    "‚ùå <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ.</b>",
                    parse_mode="HTML",
                )
                return MOVIE_RATING

            context.user_data["min_rating"] = min_rating
            context.user_data["max_rating"] = max_rating

            update.message.reply_text(
                "üé® <b>–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä–∞–º–∞, –∫–æ–º–µ–¥–∏—è) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ª—é–±–æ–π':</b>",
                parse_mode="HTML",
            )
            return MOVIE_GENRE

        except ValueError:
            update.message.reply_text(
                "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–æ–≤.</b>",
                parse_mode="HTML",
            )
            return MOVIE_RATING

    def get_genre(self, update: Update, context: CallbackContext):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        """
        genre_text = update.message.text.strip().lower()
        if genre_text == "–ª—é–±–æ–π":
            context.user_data["genre"] = None
        else:
            context.user_data["genre"] = escape(genre_text)
        update.message.reply_text(
            "üî¢ <b>–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–≤–µ—Å—Ç–∏?</b> (1-250)", parse_mode="HTML"
        )
        return MOVIE_RATING_COUNT

    def get_rating_count(self, update: Update, context: CallbackContext):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ API –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
        """
        count_text = update.message.text.strip()
        try:
            count = int(count_text)
            if count < 1 or count > 250:
                update.message.reply_text(
                    "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 250.</b>",
                    parse_mode="HTML",
                )
                return MOVIE_RATING_COUNT

            context.user_data["count"] = count

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ API —Å —É—á–µ—Ç–æ–º –∂–∞–Ω—Ä–∞
            movies_data = self.api_client.search_movies_by_rating(
                min_rating=context.user_data["min_rating"],
                max_rating=context.user_data["max_rating"],
                genre=context.user_data["genre"],
                limit=context.user_data["count"],
            )

            if not movies_data:
                update.message.reply_text(
                    "üîç <b>–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.</b>",
                    parse_mode="HTML",
                )
                return ConversationHandler.END

            movies = [Movie.from_api_data(movie) for movie in movies_data]

            # –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
            add_search_history(
                user_id=update.effective_user.id,
                search_type="rating",
                search_params={
                    "min_rating": context.user_data["min_rating"],
                    "max_rating": context.user_data["max_rating"],
                    "genre": context.user_data["genre"],
                    "count": count,
                },
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for movie in movies:
                self.send_movie_info(update, context, movie)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.send_main_menu(update, context)

            return ConversationHandler.END

        except ValueError:
            update.message.reply_text(
                "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>", parse_mode="HTML"
            )
            return MOVIE_RATING_COUNT

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –±—é–¥–∂–µ—Ç—É –∏ –∂–∞–Ω—Ä—É ---

    def movie_by_budget(self, update: Update, context: CallbackContext):
        """
        –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞ –ø–æ –±—é–¥–∂–µ—Ç—É.
        """
        keyboard = [
            [KeyboardButton("–ú–∞–ª–æ–±—é–¥–∂–µ—Ç–Ω—ã–µ"), KeyboardButton("–í—ã—Å–æ–∫–æ–±—é–¥–∂–µ—Ç–Ω—ã–µ")],
            [KeyboardButton("–û—Ç–º–µ–Ω–∞")],
        ]
        reply_markup = ReplyKeyboardMarkup(
            keyboard, resize_keyboard=True, one_time_keyboard=True
        )
        update.message.reply_text(
            "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—é–¥–∂–µ—Ç–∞:</b>\n"
            "‚Ä¢ <b>–ú–∞–ª–æ–±—é–¥–∂–µ—Ç–Ω—ã–µ</b> (0-1,500,000 USD)\n"
            "‚Ä¢ <b>–í—ã—Å–æ–∫–æ–±—é–¥–∂–µ—Ç–Ω—ã–µ</b> (100,000,000 USD –∏ –≤—ã—à–µ)",
            reply_markup=reply_markup,
            parse_mode="HTML",
        )
        return BUDGET_TYPE

    def get_budget_type(self, update: Update, context: CallbackContext):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –±—é–¥–∂–µ—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –∂–∞–Ω—Ä–∞.
        """
        budget_type = update.message.text.strip()
        if budget_type == "–ú–∞–ª–æ–±—é–¥–∂–µ—Ç–Ω—ã–µ":
            context.user_data["budget_range"] = "0-1500000"
        elif budget_type == "–í—ã—Å–æ–∫–æ–±—é–¥–∂–µ—Ç–Ω—ã–µ":
            context.user_data["budget_range"] = (
                "100000000-1000000000"  # –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª –Ω–∞ 1 –º–∏–ª–ª–∏–∞—Ä–¥
            )
        else:
            update.message.reply_text(
                "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –±—é–¥–∂–µ—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.</b>",
                parse_mode="HTML",
            )
            return BUDGET_TYPE

        update.message.reply_text(
            "üé® <b>–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä–∞–º–∞, –∫–æ–º–µ–¥–∏—è) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ª—é–±–æ–π':</b>",
            parse_mode="HTML",
        )
        return BUDGET_GENRE

    def get_budget_genre(self, update: Update, context: CallbackContext):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        """
        genre_text = update.message.text.strip().lower()
        if genre_text == "–ª—é–±–æ–π":
            context.user_data["budget_genre"] = None
        else:
            context.user_data["budget_genre"] = escape(genre_text)
        update.message.reply_text(
            "üî¢ <b>–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–≤–µ—Å—Ç–∏?</b> (1-250)", parse_mode="HTML"
        )
        return BUDGET_COUNT

    def get_budget_count(self, update: Update, context: CallbackContext):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ API –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
        """
        count_text = update.message.text.strip()
        try:
            count = int(count_text)
            if count < 1 or count > 250:
                update.message.reply_text(
                    "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 250.</b>",
                    parse_mode="HTML",
                )
                return BUDGET_COUNT

            context.user_data["count"] = count

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ API —Å —É—á–µ—Ç–æ–º –∂–∞–Ω—Ä–∞ –∏ –±—é–¥–∂–µ—Ç–∞
            movies_data = self.api_client.search_movies_by_budget(
                budget_range=context.user_data["budget_range"],
                genre=context.user_data["budget_genre"],
                limit=context.user_data["count"],
            )

            if not movies_data:
                update.message.reply_text(
                    "üîç <b>–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.</b>",
                    parse_mode="HTML",
                )
                return ConversationHandler.END

            movies = [Movie.from_api_data(movie) for movie in movies_data]

            # –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
            add_search_history(
                user_id=update.effective_user.id,
                search_type="budget",
                search_params={
                    "budget_range": context.user_data["budget_range"],
                    "genre": context.user_data["budget_genre"],
                    "count": count,
                },
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for movie in movies:
                self.send_movie_info(update, context, movie)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.send_main_menu(update, context)

            return ConversationHandler.END

        except ValueError:
            update.message.reply_text(
                "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>", parse_mode="HTML"
            )
            return BUDGET_COUNT

    # --- –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ ---
    def send_movie_info(self, update: Update, context: CallbackContext, movie: Movie):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
        :param movie: –û–±—ä–µ–∫—Ç Movie —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–µ.
        """
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
        max_description_length = 300
        description = movie.description
        if len(description) > max_description_length:
            description = description[:max_description_length].rstrip() + "..."

        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        title = escape(movie.title)
        description = escape(description)
        rating = escape(str(movie.rating)) if movie.rating else "N/A"
        year = escape(str(movie.year)) if movie.year else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        genres = escape(", ".join(movie.genres))
        age_rating = escape(str(movie.age_rating)) if movie.age_rating else "N/A"
        budget = (
            escape(f"${int(movie.budget):,}".replace(",", " "))
            if movie.budget
            else None
        )

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}\n"
            f"üìÖ <b>–ì–æ–¥:</b> {year}\n"
            f"üé≠ <b>–ñ–∞–Ω—Ä:</b> {genres}\n"
            f"üîû <b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {age_rating}+\n"
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if budget:
            message += f"üí∏ <b>–ë—é–¥–∂–µ—Ç:</b> {budget}\n"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message) > 1024:
            message = message[:1021].rstrip() + "..."

        if movie.poster_url:
            try:
                context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=movie.poster_url,
                    caption=message,
                    parse_mode="HTML",
                )
            except telegram.error.BadRequest as e:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –±—é–¥–∂–µ—Ç–∞
                if "Message caption is too long" in str(e):
                    message = (
                        f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
                        f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}\n"
                        f"üìÖ <b>–ì–æ–¥:</b> {year}\n"
                        f"üé≠ <b>–ñ–∞–Ω—Ä:</b> {genres}\n"
                        f"üîû <b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {age_rating}+"
                    )
                    if budget:
                        message += f"\nüí∏ <b>–ë—é–¥–∂–µ—Ç:</b> {budget}"
                    if len(message) > 1024:
                        message = message[:1021].rstrip() + "..."
                    context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=movie.poster_url,
                        caption=message,
                        parse_mode="HTML",
                    )
                else:
                    update.message.reply_text(
                        "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
                        parse_mode="HTML",
                    )
        else:
            try:
                update.message.reply_text(message, parse_mode="HTML")
            except telegram.error.BadRequest as e:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —á–∞—Å—Ç—è–º–∏ –∏–ª–∏ —Å–æ–∫—Ä–∞—â–∞–µ–º
                if "too long" in str(e).lower():
                    for i in range(0, len(message), 1024):
                        update.message.reply_text(
                            message[i : i + 1024], parse_mode="HTML"
                        )
                else:
                    update.message.reply_text(
                        "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
                        parse_mode="HTML",
                    )

    # --- –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
    def send_main_menu(self, update: Update, context: CallbackContext):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        keyboard = [
            [
                KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"),
                KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"),
                KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –±—é–¥–∂–µ—Ç—É"),
            ],
            [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞"), KeyboardButton("–ü–æ–º–æ—â—å")],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text(
            "üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
            reply_markup=reply_markup,
            parse_mode="HTML",
        )

    # --- –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ ---
    def history(self, update: Update, context: CallbackContext):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∫–∏.
        """
        user_id = update.effective_user.id
        history = get_search_history(user_id)

        if not history:
            update.message.reply_text(
                "üì≠ <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞.</b>", parse_mode="HTML"
            )
            return

        message_lines = ["üìö <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:</b>"]
        for entry in history:
            search_type = entry["search_type"]
            params = entry["search_params"]
            timestamp_iso = entry["timestamp"]

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            try:
                timestamp = datetime.fromisoformat(timestamp_iso).strftime(
                    "%d.%m.%Y %H:%M"
                )
            except ValueError:
                timestamp = escape(
                    timestamp_iso
                )  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–∏—Å–∫–∞
            if search_type == "name":
                name = escape(params.get("name", "N/A"))
                count = escape(str(params.get("count", "N/A")))
                message_lines.append(
                    f"üìñ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:\n"
                    f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                    f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}\n"
                    f"‚Ä¢ –í—Ä–µ–º—è: {timestamp}\n"
                )
            elif search_type == "rating":
                min_rating = escape(str(params.get("min_rating", "N/A")))
                max_rating = escape(str(params.get("max_rating", "N/A")))
                genre = escape(params.get("genre", "–ª—é–±–æ–π"))
                count = escape(str(params.get("count", "N/A")))
                message_lines.append(
                    f"‚≠ê –ü–æ–∏—Å–∫ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:\n"
                    f"‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {min_rating}-{max_rating}\n"
                    f"‚Ä¢ –ñ–∞–Ω—Ä: {genre}\n"
                    f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}\n"
                    f"‚Ä¢ –í—Ä–µ–º—è: {timestamp}\n"
                )
            elif search_type == "budget":
                budget_range = escape(params.get("budget_range", "N/A"))
                genre = escape(params.get("genre", "–ª—é–±–æ–π"))
                count = escape(str(params.get("count", "N/A")))
                message_lines.append(
                    f"üí∞ –ü–æ–∏—Å–∫ –ø–æ –±—é–¥–∂–µ—Ç—É:\n"
                    f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {budget_range}\n"
                    f"‚Ä¢ –ñ–∞–Ω—Ä: {genre}\n"
                    f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}\n"
                    f"‚Ä¢ –í—Ä–µ–º—è: {timestamp}\n"
                )

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
        full_message = "\n".join(message_lines)
        if len(full_message) > 4096:
            for i in range(0, len(full_message), 4096):
                update.message.reply_text(full_message[i : i + 4096], parse_mode="HTML")
        else:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
            keyboard = [
                [
                    InlineKeyboardButton(
                        "‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_history"
                    ),
                    InlineKeyboardButton(
                        "‚ùå –ù–µ—Ç, –Ω–µ –æ—á–∏—â–∞—Ç—å",
                        callback_data="cancel_clear_history",
                    ),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text(full_message, reply_markup=reply_markup)

    # --- –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
    def handle_clear_history(self, update: Update, context: CallbackContext):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.
        """
        query = update.callback_query
        query.answer()

        data = query.data

        if data == "confirm_clear_history":
            user_id = query.from_user.id
            clear_search_history(user_id)
            query.edit_message_text(
                "üóëÔ∏è –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.",
            )
        elif data == "cancel_clear_history":
            query.edit_message_text(
                "‚ÑπÔ∏è –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            )
